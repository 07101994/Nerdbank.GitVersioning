<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <VersionSourceFile>$(IntermediateOutputPath)\$(AssemblyName).Version$(DefaultLanguageSourceExtension)</VersionSourceFile>

    <PrepareResourcesDependsOn>
      GenerateAssemblyInfo;
      $(PrepareResourcesDependsOn)
    </PrepareResourcesDependsOn>

    <CoreCompileDependsOn>
      GenerateAssemblyInfo;
      $(CoreCompileDependsOn)
    </CoreCompileDependsOn>
  </PropertyGroup>

  <UsingTask AssemblyFile="$(NerdbankGitVersioningTasksPath)Nerdbank.GitVersioning.Tasks.dll" TaskName="AssemblyInfo"/>
  <UsingTask AssemblyFile="$(NerdbankGitVersioningTasksPath)Nerdbank.GitVersioning.Tasks.dll" TaskName="GetBuildVersion"/>
  <UsingTask AssemblyFile="$(NerdbankGitVersioningTasksPath)Nerdbank.GitVersioning.Tasks.dll" TaskName="CompareFiles"/>

  <Import Project="VisualStudioTeamServices.targets"  Condition=" '$(SYSTEM_TEAMPROJECTID)' != '' "/>
  <Import Project="AppVeyor.targets"                  Condition=" '$(APPVEYOR)' == 'True' "/>
  <PropertyGroup>
    <!-- Consider building a tag to be more precise than the branch we're building. -->
    <_NBGV_BuildingRef>$(_NBGV_BuildingTag)</_NBGV_BuildingRef>
    <_NBGV_BuildingRef Condition=" '$(_NBGV_BuildingRef)' == '' ">$(_NBGV_BuildingBranch)</_NBGV_BuildingRef>
  </PropertyGroup>

  <Target Name="GetBuildVersion" Returns="$(BuildVersion)">
    <GetBuildVersion BuildingRef="$(_NBGV_BuildingRef)">
      <Output TaskParameter="Version" PropertyName="BuildVersion" />
      <Output TaskParameter="SimpleVersion" PropertyName="BuildVersionSimple" />
      <Output TaskParameter="PrereleaseVersion" PropertyName="PrereleaseVersion" Condition=" '$(PrereleaseVersion)' == '' " />
      <Output TaskParameter="MajorMinorVersion" PropertyName="MajorMinorVersion" />
      <Output TaskParameter="AssemblyVersion" PropertyName="AssemblyVersion" />
      <Output TaskParameter="GitCommitId" PropertyName="GitCommitId" />
      <Output TaskParameter="GitVersionHeight" PropertyName="GitVersionHeight" />
      <Output TaskParameter="BuildNumber" PropertyName="BuildVersionNumberComponent" />
      <Output TaskParameter="PublicReleaseDefault" PropertyName="PublicReleaseDefault" />
    </GetBuildVersion>
    <PropertyGroup>
      <PublicRelease Condition=" '$(PublicRelease)' == '' ">$(PublicReleaseDefault)</PublicRelease>

      <BuildNumber>$(BuildVersionNumberComponent)</BuildNumber>
      <BuildNumberFirstComponent>$([System.Text.RegularExpressions.Regex]::Match($(BuildNumber), '(\d+)').Groups[1].Value)</BuildNumberFirstComponent>
      <BuildNumberSecondComponent>$([System.Text.RegularExpressions.Regex]::Match($(BuildNumber), '(\d+)\.(\d+)').Groups[2].Value)</BuildNumberSecondComponent>
      <BuildNumberFirstAndSecondComponentsIfApplicable Condition=" '$(BuildNumberSecondComponent)' == '' ">$(BuildNumberFirstComponent)</BuildNumberFirstAndSecondComponentsIfApplicable>
      <BuildNumberFirstAndSecondComponentsIfApplicable Condition=" '$(BuildNumberSecondComponent)' != '' ">$(BuildNumberFirstComponent).$(BuildNumberSecondComponent)</BuildNumberFirstAndSecondComponentsIfApplicable>

      <!-- In TeamCity, the build agent doesn't get the .git directory, but the commit id is available by other means. -->
      <GitCommitId Condition=" '$(GitCommitId)' == '' ">$(BUILD_VCS_NUMBER)</GitCommitId>

      <GitCommitIdShort Condition=" '$(GitCommitId)' != '' ">$(GitCommitId.Substring(0,10))</GitCommitIdShort>
      <SemVerBuildSuffix Condition=" '$(GitCommitIdShort)' != '' ">+g$(GitCommitIdShort)</SemVerBuildSuffix>

      <BuildVersion3Components>$(MajorMinorVersion).$(BuildNumberFirstComponent)</BuildVersion3Components>
      <AssemblyInformationalVersion>$(MajorMinorVersion).$(BuildNumberFirstAndSecondComponentsIfApplicable)$(PrereleaseVersion)$(SemVerBuildSuffix)</AssemblyInformationalVersion>
      <AssemblyFileVersion>$(BuildVersion)</AssemblyFileVersion>
      <NuGetPackageVersion>$(BuildVersion3Components)$(PrereleaseVersion)</NuGetPackageVersion>

      <!-- For unreleased versions (not expected to follow linear history), append the git commit id.
           The 'g' prefix allows tooling to recognize that a git commit ID follows. -->
      <NuGetPackageVersion Condition=" '$(PublicRelease)' != 'true' ">$(NuGetPackageVersion)-g$(GitCommitIdShort)</NuGetPackageVersion>
    </PropertyGroup>

    <Warning Condition=" '$(AssemblyInformationalVersion)' == '' " Text="Unable to determine the git HEAD commit ID to use for informational version number." />
    <Message Condition=" '$(AssemblyInformationalVersion)' != '' " Text="Building version $(BuildVersion) from commit $(GitCommitId)"/>
    <Message Condition=" '$(AssemblyInformationalVersion)' == '' " Text="Building version $(BuildVersion)"/>
    <Message Importance="low" Text="AssemblyInformationalVersion: $(AssemblyInformationalVersion)" />
    <Message Importance="low" Text="NuGetPackageVersion: $(NuGetPackageVersion)" />
  </Target>

  <Target Name="GetNuGetPackageVersion" DependsOnTargets="GetBuildVersion" Returns="$(NuGetPackageVersion)" />

  <Target Name="GenerateAssemblyInfo" DependsOnTargets="GetBuildVersion">
    <PropertyGroup>
      <NewVersionSourceFile>$(VersionSourceFile).new</NewVersionSourceFile>
      <UltimateResourceFallbackLocation Condition=" '$(DevDivProjectSubType)' != 'portable' ">UltimateResourceFallbackLocation.MainAssembly</UltimateResourceFallbackLocation>
    </PropertyGroup>
    <MakeDir Directories="$(IntermediatePath)"/>
    <AssemblyInfo OutputFile="$(NewVersionSourceFile)" CodeLanguage="$(Language)"
                  AssemblyVersion="$(AssemblyVersion)"
                  AssemblyFileVersion="$(AssemblyFileVersion)"
                  AssemblyInformationalVersion="$(AssemblyInformationalVersion)" />
    <!-- Avoid applying the newly generated AssemblyInfo.cs file to the build 
         unless it has changed in order to allow for incremental building. -->
    <CompareFiles OriginalItems="$(VersionSourceFile)" NewItems="$(NewVersionSourceFile)">
      <Output TaskParameter="AreChanged" PropertyName="AssemblyInfoChanged" />
    </CompareFiles>
    <Copy Condition=" '$(AssemblyInfoChanged)' == 'true' " SourceFiles="$(NewVersionSourceFile)" DestinationFiles="$(VersionSourceFile)" />
    <ItemGroup>
      <Compile Include="$(VersionSourceFile)" />
    </ItemGroup>
  </Target>

  <!-- Support for pattern found in users of Tvl.NuGet.BuildTasks. -->
  <Target Name="SupplyNuGetManifestVersion"
          DependsOnTargets="GetBuildVersion"
          BeforeTargets="EnsureNuGetManifestMetadata">
    <ItemGroup>
      <NuGetManifest>
        <Version>$(NuGetPackageVersion)</Version>
      </NuGetManifest>
    </ItemGroup>
  </Target>
</Project>
